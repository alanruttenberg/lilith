# -*- encoding:utf-8 Mode: POLY-ORG;  -*- --- 
#+Startup: noindent

[[https://travis-ci.com/jingtaozf/literate-lisp][file:https://travis-ci.com/jingtaozf/literate-lisp.svg?branch=master]]

* Table of Contents                                            :TOC:noexport:
- [[#introducation][Introducation]]
- [[#preparation][Preparation]]
  - [[#install-polymode-in-emacs][install polymode in emacs]]
- [[#a-demo-lisp-package][A demo lisp package]]
  - [[#prepare-the-asd-definition-file][Prepare the asd definition file]]
  - [[#package-definition][package definition]]
  - [[#a-demo-function-to-a-recursive-assoc-implementation][a demo function to a recursive assoc implementation]]
- [[#test-cases-for-this-demo-project][Test cases for this demo project]]
  - [[#preparation-1][Preparation]]
  - [[#tests-for-recursive-assoc][tests for ~recursive-assoc~]]
  - [[#run-all-tests-in-this-library][run all tests in this library]]

* Introducation
This is a demo project to show a way how to use [[http://www.literateprogramming.com/][literal programming]] in common lisp.

The implementation details of [[https://github.com/jingtaozf/literate-lisp][literate-lisp]] can be found in file [[./tangle.org]] ([[./tangle.pdf][pdf version]]).

This library contains the following files:
- [[./tangle.org]] \\ 
  The implementation and documentation of literate lisp reader.
- [[./tangle.lisp]] \\
  The tangled codes of literate lisp reader, generated from ~tangle.org~
- [[./tangle.pdf]] \\
  The weaved documentation, generated from ~tangle.org~ by org mode's [[https://orgmode.org/manual/Triggering-publication.html#Triggering-publication][publish feature]].
- [[./readme.org]] \\
  This file contains introduction and demo codes for how to do literate lisp in an org file.
- [[./.travis.yml]] \\
  The config file used by Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] to test this library.
- [[./literate-lisp.asd]] \\
  The asdf definition for literate-lisp project.
- [[./literate-demo.asd]] \\
  The asdf definition for literate demo project.

* Preparation
** install polymode in emacs
The org file should be opened with [[https://polymode.github.io/][polymode]],the following elisp scripts should be added in .emacs
#+BEGIN_SRC elisp
(use-package poly-org
    :ensure t)
#+END_SRC

* A demo lisp package
** Prepare the asd definition file

We use the original asd definition file, so file [[./literate-demo.asd]] has to be added firstly
(The documentation of extended asdf syntax can be found in [[https://github.com/jingtaozf/literate-lisp/blob/master/tangle.org#make-asdf-handle-org-file-correctly][tangle.org]]).

To use the extended asdf syntax, we have to load [[https://github.com/jingtaozf/literate-lisp][literate-lisp]] firstly in asd file like this
#+BEGIN_SRC lisp :tangle no
(eval-when (:load-toplevel :execute)
  (asdf:load-system :literate-lisp))
#+END_SRC

Now define the asd system for this demo package
#+BEGIN_SRC elisp :tangle no
(asdf:defsystem literate-demo
  :author "Xu Jingtao <jingtaozf@gmail.com>"
  :version "0.1"
  :licence "MIT"
  :serial t
  :description "an demo project of literate-lisp"
  :components ((:module org :pathname "./"
                        :components ((:org "readme"))))
  :properties ((version "0.1"))
  :depends-on (:literate-lisp))
#+END_SRC
Which will load this [[./readme.org]] directly as a lisp source file.

The whole content of asd file can be found in [[./literate-demo.asd]].

** package definition

Now we can add both documents and lisp codes in this org file directly in emacs.

Firstly we define a new package for this demo project and switch to it.
#+BEGIN_SRC lisp
(in-package :common-lisp-user)
(defpackage :literate-demo (:use :cl))
(in-package :literate-demo)
#+END_SRC
** a demo function to a recursive assoc implementation
As a demo project, we just show a demo function ~recursive-assoc~ here.

The function [[http://clhs.lisp.se/Body/f_assocc.htm][cl:assoc]] only find first level item from an [[http://clhs.lisp.se/Body/26_glo_a.htm#association_list][association list]], when I want to
find item from an association list contains many other association list with deep level, I
have to write codes like this which will lead the codes too long.
#+BEGIN_SRC lisp :tangle test
(cdr (assoc :b (cdr (assoc :a '((:a . ((:b . c))))))))
#+END_SRC
To simplify the expression, a macro ~recursive-assoc~ is provided to simply it to the following form
#+BEGIN_SRC lisp :tangle no
(recursive-assoc '((:a . ((:b . c)))) :a :b)
#+END_SRC

a macro function to expand lisp expressions recursively is provided firstly.
#+BEGIN_SRC lisp
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun expand-recursive-assoc (alist recursive-properties)
    (if (cdr recursive-properties)
      (expand-recursive-assoc `(cdr (assoc ,(car recursive-properties) ,alist))
                              (cdr recursive-properties))
      `(cdr (assoc ,(car recursive-properties) ,alist)))))
#+END_SRC

Then the implementation macro is very simple(test is here: ref:test-recursive-assoc)
#+BEGIN_SRC lisp
(defmacro recursive-assoc (alist &rest recursive-properties)
  (when recursive-properties
    (expand-recursive-assoc alist recursive-properties)))
#+END_SRC

for example, you can use it like this,which get ~:b~ part of the sub alist 
which is ~:a~ part of the original list.
#+BEGIN_SRC lisp :tangle test
(equal 'c (recursive-assoc '((:a . ((:b . c)))) :a :b))
#+END_SRC
* Test cases for this demo project
** Preparation
Now it's time to validate some functions.
The [[https://github.com/jphmrst/cl-nst][nst]] library is used to test.
#+BEGIN_SRC lisp :tangle test
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package :nst)
    (ql:quickload :nst)))
#+END_SRC
** tests for ~recursive-assoc~
label:test-recursive-assoc
#+BEGIN_SRC lisp :tangle test
(nst:def-test-group recursive-assoc ()
  (nst:def-test t1
      (:equal 'c) (recursive-assoc '((:a . ((:b . c)))) :a :b)))
#+END_SRC
** run all tests in this library
This function is the entry point to run all tests and return true if all test cases pass.
#+BEGIN_SRC lisp :tangle test
(defun run-test ()
  (nst::run-package :literate-demo)
  (multiple-value-bind (status checks passed error fail warn)
      (nst::result-summary (nst::package-report (find-package :literate-demo)))
    (format t "~&nst test status for literate-demo:~a, checks:~d, passed:~d, error:~D,faile:~D,warn:~D~%"
            status checks passed error fail warn)
    (and (= fail 0) (= 0 error))))
#+END_SRC
Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] will load config file [[./.travis.yml]] to run these tests automatically 
every time there is a new git change.
