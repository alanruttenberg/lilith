# -*- encoding:utf-8 Mode: POLY-ORG;  -*- ---
#+Startup: noindent
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes

* Table of Contents                                            :TOC:noexport:
- [[#introduction][Introduction]]
- [[#tutorial][Tutorial]]
  - [[#install-polymode-in-emacs][Install polymode in Emacs]]
  - [[#using-lilith][Using Lilith]]
  - [[#a-worked-example-this-file][A worked example: This file.]]
  - [[#tests][Tests]]
  - [[#notes][Notes]]

* Introduction
[[https://github.com/jingtaozf/literate-lisp][Lilith]] is inspired by [[https://github.com/jingtaozf/literate-lisp][Jingtao Xu's Literate Lisp project]], and started as a fork of that project. 
This readme was substantially authored by Jingtao Xu. Note that Lilith doesn't use the same syntax as Literate Lisp.

Lilith provides an easy way to use [[http://www.literateprogramming.com/][literate programming]] in Common Lisp language by extending the Common Lisp [[https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node187.html][reader syntax]], 
and lisp's load, compile-file, and defun,  so that a Common Lisp implementation can read org files as Common Lisp source files. By using Lilth, Emacs [[https://orgmode.org/][org mode]] and elisp library [[https://polymode.github.io/][polymode]],
You can create source one source file containing both documentation and source and which interacts well with [[https://common-lisp.net/project/slime/][SLIME]].

This library contains the following files:
| [[./lilith.org][lilith.org]]                 | The implementation and documentation.                                                      |
| [[./lilith.lisp][lilith.lisp]]                | Lisp source generated from [[./lilith.org][lilith.org]], to bootstrap.                         |
| [[./readme.org][readme.org]]                 | This file                                                                                  |
| [[./.github/workflows/continuous-integration.yml][continuous-integration.yml]] | The config file used by Web service [[https://github.com/jingtaozf/literate-lisp/actions][github actions]] to test this library - /not yet active/ |
| [[./lilith.asd][lilith.asd]]                 | The ASDF definition for the Lilith project                                                 |
| [[./lilith-demo.asd][lilith-demo.asd]]            | The ASDF definition for a system that uses this readme file as source code.                |

  
* Tutorial
** Install polymode in Emacs
The elisp library [[https://polymode.github.io/][polymode]] enhances org mode by arranging that as
you move into a source code block, slime-mode becomes active.

Include the following in your .emacs to install it.
#+BEGIN_SRC elisp
(use-package poly-org :ensure t)
#+END_SRC
** Using Lilith
Please review [[./lilith.org#Terminology][Terminology]].
*** Syntax
Lilith authoring uses two syntactic elements in lisp: :@ marks where a code chunk should be substituted and :@+ is used to
define or add to a code chunk named. For example,

#+begin_src lisp load no
(:@+ |some bindings| (a 10) (b 20))
#+end_src
:@ is used to insert a chunk so-defined.
#+begin_src lisp load no
(defun foo ()
  (let ((:@ |some bindings|))
     (+ a b)))
#+end_src
By the time it gets to lisp, the function is transformed to 
#+begin_src lisp load no
(defun foo ()
  (let (;; Using |some bindings|
	(a 10) (b 20))
     (+ a b)))
#+end_src
:@ may be also used outside defun. In that case the chunk is wrapped in a progn.

Lilith also provides a mechanism for putting text in a freetext block, so you 
don't have to worry about quoting *"* or making code ugly with multi-line text strings.
Here's an example of how to do it.

#+begin_example
,#+begin_verse lisp 
:@+ |example text chunk|
This is some text
,#+end_verse
#+end_example

With this, 
#+begin_src lisp :load no
(print (:@ |example text chunk|))
#+end_src
is transfomed to
#+begin_src lisp :load no
(print "This is some text")
#+end_src

Text blocks can also be used a list of lines or be read from a stream. For details see 
[[./lilith.html#sec-2-3][Working with text chunks]]

*** A new code block header argument in org-mode: ~load~
Lilith adds a new header for lisp source blocks in org-mode. For example, writing
#+begin_example
,#+begin_src lisp load no
(never-evalute-this!)
,#+end_src
#+end_example
indicates that the contents of the source block will not be read when loading the org file.
In particular, using "load test" indicates that the source block will not be read unless either
the keyword :test or :lilith-test is an element of ~*features*~.
For more details see [[./lilith.org#Let-a-header-argument-determine-whether-to-load][Let a header argument determine whether to load]].
*** Tangling a file
The function ~tangle-org-file~ transforms the org-mode source to lisp. E.g.
#+begin_src lisp load no
(tangle-org-file "readme.org")      
#+end_src
By default the non-lisp text is included as comments in the resulting source. You can prevent
that by passing ~:keep-org-text nil~ to the function. For more details see [[./lilith.org/Tangling-the-org-file][Tangling the org file]].
You can have tangle include ~load test~ lisp blocks with ~:keep-tests t~.
    
** A worked example: This file.
*** Preparing an ASDF definition file
We extend ASDF to add an :org component. See [[./lilith.org#ASDF-support-for-org-file-as-source-code][ASDF support for org file as source code]].

Lilith itself can be loaded as a precondition for a system using ~:defsystem-depends-on~. Then, instead of using ~:file~ in your sysdef, you use ~:org~ for org file source.

First define an ASDF system file [[./lilith-demo.asd]] which loads this [[./readme.org]] directly as a lisp source file.
#+BEGIN_SRC elisp :load no
(asdf:defsystem lilith-demo
  :author "Alan Ruttenberg <alanruttenberg@gmail.com> and Xu Jingtao <jingtaozf@gmail.com>"
  :version "1"
  :licence "MIT/CC-BY"
  :serial t
  :description "lilith demo"
  :defsystem-depends-on ("lilith")
  :components ((:module :demo :pathname "./"
                        :components ((:org "readme"))))
  )
#+END_SRC
This sysdef is in the file [[./lilith-demo.asd]].

*** Package
Define a new package for this demo project and switch to it.
#+BEGIN_SRC lisp
(in-package :common-lisp-user)
(defpackage :lilith-demo (:use :cl))
(in-package :lilith-demo)
#+END_SRC
*** For demonstration, a recursive assoc implementation
For the demo, we'll define a function ~recursive-assoc~.

The function [[http://clhs.lisp.se/Body/f_assocc.htm][assoc]] find an item from a linear [[http://clhs.lisp.se/Body/26_glo_a.htm#association_list][association list]]. Suppose I want to
find an item from an something like an association list but which contains nested association lists.
Using assoc I would have to write, e.g.,
#+BEGIN_SRC lisp :load test
(cdr (assoc :b (cdr (assoc :a '((:a . ((:b . c))))))))
#+END_SRC
Let's define a macro ~recursive-assoc~ as a replacement for assoc, to be used like this:
#+BEGIN_SRC lisp :load no
(recursive-assoc '((:a . ((:b . c)))) :a :b)
#+END_SRC

First, define a macro function to expand lisp expressions recursively.
#+BEGIN_SRC lisp
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun expand-recursive-assoc (alist recursive-properties)
    (if (cdr recursive-properties)
      (expand-recursive-assoc `(cdr (assoc ,(car recursive-properties) ,alist))
                              (cdr recursive-properties))
      `(cdr (assoc ,(car recursive-properties) ,alist)))))
#+END_SRC

Now we implement ~recursive-assoc~ as below. A test is in [[test recursive assoc]].
#+BEGIN_SRC lisp
(defmacro recursive-assoc (alist &rest recursive-properties)
  (when recursive-properties
    (expand-recursive-assoc alist recursive-properties)))
#+END_SRC

Here's an example, which gets ~:b~ association of a nested association list and 
checks it. We define this as a code chunk (for demonstration purposes) to be used 
in [[test recursive assoc]].

#+BEGIN_SRC lisp :load test
(:@+ |test|
(5am:test recursive-assoc
  (5am:is (equal 'c (recursive-assoc '((:a . ((:b . c)))) :a :b)))))
#+END_SRC

** Tests
*** Using FiveAM

The [[https://common-lisp.net/project/fiveam/][FiveAM]] library is used for tests.

#+BEGIN_SRC lisp :load test
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package :fiveam)
    #+quicklisp (ql:quickload :fiveam)
    #-quicklisp (asdf:load-system :fiveam)))
(5am:def-suite lilith-demo-suite :description "The test suite of lilith-demo.")
(5am:in-suite lilith-demo-suite)
#+END_SRC

*** The test, demonstrating use of a code chunk
<<test recursive assoc>>
#+BEGIN_SRC lisp :load test
(:@ |test|)

#+END_SRC

*** run all tests in this library
This function is the entry point to run all tests and return true if all test cases pass.
#+BEGIN_SRC lisp :load test
 (5am:run! 'lilith-demo-suite)
#+END_SRC

** Notes
*** Debugging in LispWorks
You can debug in the LispWorks IDE by adding the following to your  ~.lispworks~ file,
which lets the Lispworks Editor know that the org file should be viewed as lisp file.
#+BEGIN_SRC lisp :load no
(defun check-org-mode (buffer truename)
  (when (and truename (equal (pathname-type truename) "org"))
    (setf (editor:buffer-major-mode buffer) "Lisp")))
(editor:add-global-hook editor::read-file-hook 'check-org-mode)
#+END_SRC
Thanks to Martin Simmons at [[http://www.lispworks.com/][LispWorks]] for this.

*** Testing lilith (coming soon)
The [[https://github.com/jingtaozf/literate-lisp/actions][github actions]] service loads a configuration file [[./.github/workflows/continuous-integration.yml][continuous-integration.yml]] that runs the lilith tests
when a commit is made.
